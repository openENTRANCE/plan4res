#/bin/bash

# this scripts launches 
# - creation of plan4res dataset (set of cev files)
# - Computation of bellman values (SSV) 
# - Simulation (SIM)
# - Post treatment of results

export P4R_ENV="../bin/p4r"
export TIME_P4R_ENV="/usr/bin/time -v ${P4R_ENV}"
export PYTHONSCRIPTS="scripts/python/plan4res-scripts/"
export DATA="data/local/"

# DATASET is the name of the directory within data/local
if [ "$1" == "" ] ; then
    echo "provide name of dataset in data/local/"
    read DATASET
else
	echo $1
	DATASET=$1
	echo $DATASET
fi

export INSTANCE="${DATA}${DATASET}/"
export CONFIG="${DATA}${DATASET}/settings/"

# run script to create plan4res input dataset (ZV_ZineValues.csv ...)
# comment if you are using handmade datasets
${P4R_ENV} python -W ignore ${PYTHONSCRIPTS}CreateInputPlan4res_simul.py /${CONFIG}settingsCreateInputPlan4res_simul.yml ${DATASET}

# run formatting script to create netcdf input files
${P4R_ENV} python -W ignore ${PYTHONSCRIPTS}format.py /${CONFIG}settings_format_optim.yml /${CONFIG}settingsCreateInputPlan4res_simul.yml ${DATASET}

# update sddp_solver configuration file to account for number of scenarios
current_directory=$(dirname "$(readlink -f "$0")")/../
rowsettings=$(awk -F ':' '$1=="    Scenarios"' $current_directory${CONFIG}settings_format_optim.yml)
StrNbCommas=$(echo $rowsettings | grep -o ',' | wc -l)
let "NbCommas=$StrNbCommas"
newNbScen=`expr $NbCommas + 1`
rowconfig=$(grep "intNbSimulCheckForConv" $current_directory${CONFIG}sddp_solver.txt)
intNbSimulCheckForConv=$(echo "$rowconfig" | cut -d ' ' -f 2-)
let "oldNbScen=$intNbSimulCheckForConv"
echo "number scenarios in sddp_solver.txt: $oldNbScen, replaced by $newNbScen"
toreplace="$oldNbScen"
replacement="$newNbScen"
newrowconfig=${rowconfig/"$toreplace"/"$replacement"}
sed -i "s/$rowconfig/$newrowconfig/g" "$current_directory${CONFIG}sddp_solver.txt"

# run sddp solver
${TIME_P4R_ENV} sddp_solver -S ${CONFIG}sddp_solver.txt -c ${CONFIG} -p ${INSTANCE}nc4_optim/ ${INSTANCE}nc4_optim/SDDPBlock.nc4

mkdir ../${INSTANCE}results_simul/
mv ../Bellman* ../${INSTANCE}
cp ../${INSTANCE}Bellman* ../${INSTANCE}results_simul/
cp ../cuts.txt ../${INSTANCE}
cp ../cuts.txt ../${INSTANCE}results_simul/
rm ../regressors.sddp.* ../visited_states.sddp.* ../cuts.sddp* ../uc.lp
cp ../${INSTANCE}cuts.txt ../${INSTANCE}bellmanvalues.csv
cp ../${INSTANCE}BellmanValuesOUT.csv ../${INSTANCE}bellmanvalues.csv
# run formatting script to create netcdf input files
${P4R_ENV} python -W ignore ${PYTHONSCRIPTS}format.py /${CONFIG}settings_format_simul.yml /${CONFIG}settingsCreateInputPlan4res_simul.yml ${DATASET}

mkdir ../${INSTANCE}results_simul
mkdir ../${INSTANCE}results_simul/Demand
mkdir ../${INSTANCE}results_simul/Volume
mkdir ../${INSTANCE}results_simul/MarginalCosts
mkdir ../${INSTANCE}results_simul/Flows
mkdir ../${INSTANCE}results_simul/ActivePower
mkdir ../${INSTANCE}results_simul/Primary
mkdir ../${INSTANCE}results_simul/Secondary
mkdir ../${INSTANCE}results_simul/MaxPower

rowsettings=$(awk -F ':' '$1=="    Scenarios"' $current_directory${CONFIG}settings_format_simul.yml)
StrNbCommas=$(echo $rowsettings | grep -o ',' | wc -l)
let "NbCommas=$StrNbCommas"
NbScen=`expr $NbCommas + 1`
echo "number scenarios: $NbScen"

echo "$NbScen scenarios"
for (( scen=0; scen<$NbScen; scen++ ))
do
	echo "solve scenario $scen"
	${P4R_ENV} sddp_solver -l ${INSTANCE}bellmanvalues.csv -s -i ${scen} -S ${CONFIG}sddp_greedy.txt -c ${CONFIG} -p ${INSTANCE}nc4_simul/ ${INSTANCE}nc4_simul/SDDPBlock.nc4

	mv ../DemandOUT.csv ../${INSTANCE}results_simul/Demand/Demand${scen}.csv
	mv ../VolumeOUT.csv ../${INSTANCE}results_simul/Volume/Volume${scen}.csv
	mv ../MarginalCostActivePowerDemandOUT.csv ../${INSTANCE}results_simul/MarginalCosts/MarginalCostActivePowerDemand${scen}.csv
	mv ../MarginalCostFlowsOUT.csv ../${INSTANCE}results_simul/MarginalCosts/MarginalCostFlows${scen}.csv
	mv ../FlowsOUT.csv ../${INSTANCE}results_simul/Flows/Flows${scen}.csv
	mv ../ActivePowerOUT.csv ../${INSTANCE}results_simul/ActivePower/ActivePower${scen}.csv
	mv ../MarginalCostInertiaOUT.csv ../${INSTANCE}results_simul/MarginalCosts/MarginalCostInertia${scen}.csv
	mv ../MarginalCostPrimaryOUT.csv ../${INSTANCE}results_simul/MarginalCosts/MarginalCostPrimary${scen}.csv
	mv ../MarginalCostSecondaryOUT.csv ../${INSTANCE}results_simul/MarginalCosts/MarginalCostSecondary${scen}.csv
	mv ../MaxPowerOUT.csv ../${INSTANCE}results_simul/MaxPower/MaxPower${scen}.csv
	mv ../PrimaryOUT.csv ../${INSTANCE}results_simul/Primary/Primary${scen}.csv
	mv ../SecondaryOUT.csv ../${INSTANCE}results_simul/Secondary/Secondary${scen}.csv
done 
rm ../uc.lp

echo 'Simulation completed'
echo 'Launch PostTreat'
${P4R_ENV} python -W ignore ${PYTHONSCRIPTS}PostTreatPlan4res.py /${CONFIG}settingsPostTreatPlan4res_simul.yml /${CONFIG}settings_format_simul.yml /${CONFIG}settingsCreateInputPlan4res_simul.yml ${DATASET}